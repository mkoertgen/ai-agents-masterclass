volumes:
  n8n_storage:
  postgres_storage:
  pgadmin_data:
  ollama_storage:
  qdrant_storage:
  open-webui:
  flowise:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  environment:
    DB_TYPE: postgresdb
    DB_POSTGRESDB_HOST: postgres
    DB_POSTGRESDB_USER: root
    DB_POSTGRESDB_PASSWORD: password
    N8N_DIAGNOSTICS_ENABLED: "false"
    N8N_PERSONALIZATION_ENABLED: "false"
    N8N_ENCRYPTION_KEY: super-secret-key
    N8N_USER_MANAGEMENT_JWT_SECRET: even-more-secret
  links: [postgres]

services:
  ollama:
    image: ollama/ollama:latest
    ports: [11434:11434]
    volumes: [ollama_storage:/root/.ollama]
    deploy:
      resources:
        reservations:
          devices: [{ driver: nvidia, count: 1, capabilities: [gpu] }]

  ollama-pull-llama:
    image: ollama/ollama:latest
    volumes: [ollama_storage:/root/.ollama]
    depends_on: [ollama]
    entrypoint: /bin/sh
    command:
      - "-c"
      - "sleep 3; OLLAMA_HOST=ollama:11434 ollama pull llama3.1; OLLAMA_HOST=ollama:11434 ollama pull nomic-embed-text"

  flowise:
    image: flowiseai/flowise
    environment: [PORT=3001]
    ports: [3001:3001]
    extra_hosts: [host.docker.internal:host-gateway]
    volumes: [~/.flowise:/root/.flowise]
    entrypoint: /bin/sh -c "sleep 3; flowise start"

  open-webui: # https://docs.openwebui.com/#quick-start-with-docker-
    image: ghcr.io/open-webui/open-webui:main
    ports: [3000:8080]
    extra_hosts: [host.docker.internal:host-gateway]
    volumes: [open-webui:/app/backend/data]
    environment:
      # https://docs.openwebui.com/getting-started/env-configuration
      ENABLE_LOGIN_FORM: "false"
      DEFAULT_USER_ROLE: "admin"
      #OLLAMA_BASE_URL: http://host.docker.internal:11434/api
      WEBUI_AUTH: "false"
      VECTOR_DB: "qdrant"
      QDRANT_URI: "http://qdrant:6333"

  postgres:
    image: postgres:16-alpine
    ports: [5432:5432]
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: password
      POSTGRES_DB: n8n
    volumes: [postgres_storage:/var/lib/postgresql/data]

  pgadmin:
    image: dpage/pgadmin4:latest
    ports: [5050:80]
    environment:
      # https://www.pgadmin.org/docs/pgadmin4/9.1/container_deployment.html#environment-variables
      PGADMIN_DEFAULT_EMAIL: "admin@admin.com" # Default login email
      PGADMIN_DEFAULT_PASSWORD: "admin" # Default login password
      # https://www.pgadmin.org/docs/pgadmin4/9.1/config_py.html#config-py
      PGADMIN_CONFIG_SERVER_MODE: "False" # Disable server mode for local development
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False" # Disable master password requirement
      PGPASSFILE: "/var/lib/pgadmin/.pgpass" # Path to the .pgpass file for passwordless login
    depends_on: [postgres]
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json # Mount the preconfigured servers file
      - ./pgadmin/.pgpass:/tmp/.pgpass # Mount the preconfigured .pgpass file for passwordless login
    # The .pgpass file needs to hav 600, impossible on Windows, so hack it
    # - https://github.com/pgadmin-org/pgadmin4/issues/6741#issuecomment-1766137555
    entrypoint: >
      /bin/sh -c "
      cp /tmp/.pgpass /var/lib/pgadmin/.pgpass;
      chown pgadmin:root /var/lib/pgadmin/.pgpass; 
      chmod 600 /var/lib/pgadmin/.pgpass;
      /entrypoint.sh;
      "

  n8n-import:
    <<: *service-n8n
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes: [./n8n/backup:/backup]
    depends_on: [postgres]

  n8n:
    <<: *service-n8n
    restart: unless-stopped
    ports: [5678:5678]
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on: [postgres, n8n-import]

  qdrant:
    image: qdrant/qdrant
    ports: [6333:6333]
    volumes: [qdrant_storage:/qdrant/storage]
